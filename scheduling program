i + 1;
    printf("Enter burst t#include <stdio.h>

#define MAX_PROCESSES 100

struct process {
  int id;
  int burst_time;
};

int main() {
  int n, i, j;
  struct process processes[MAX_PROCESSES];
  int completion_time[MAX_PROCESSES];
  int turnaround_time[MAX_PROCESSES];
  int waiting_time[MAX_PROCESSES];


  printf("Enter the number of processes: ");
  scanf("%d", &n);

  
  for (i = 0; i < n; i++) {
    processes[i].id = ime for process %d: ", processes[i].id);
    scanf("%d", &processes[i].burst_time);
  }

  for (i = 0; i < n; i++) {
    for (j = 0; j < n - i - 1; j++) {
      if (processes[j].burst_time > processes[j + 1].burst_time) {
        struct process temp = processes[j];
        processes[j] = processes[j + 1];
        processes[j + 1] = temp;
      }
    }
  }


  completion_time[0] = processes[0].burst_time;
  turnaround_time[0] = completion_time[0];
  waiting_time[0] = 0;
  for (i = 1; i < n; i++) {
    completion_time[i] = completion_time[i - 1] + processes[i].burst_time;
    turnaround_time[i] = completion_time[i];
    waiting_time[i] = turnaround_time[i] - processes[i].burst_time;
  }

  
  printf("Process ID\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
  for (i = 0; i < n; i++) {
    printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, completion_time[i], turnaround_time[i], waiting_time[i]);
  }

  return 0;
}
